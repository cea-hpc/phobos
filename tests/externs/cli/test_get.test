#!/bin/bash

#
#  All rights reserved (c) 2014-2025 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the Licence, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for get commands
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh


function dir_setup()
{
    export DIRS=("$DIR_TEST_IN/tmp1" "$DIR_TEST_IN/tmp2")
    mkdir ${DIRS[@]}

    $phobos dir add ${DIRS[@]}
    $phobos dir format --fs posix --unlock ${DIRS[@]}
}

function setup()
{
    setup_tables
    invoke_lrs
    setup_test_dirs
    dir_setup
}

function cleanup()
{
    waive_lrs
    cleanup_test_dirs
    drop_tables
}

function test_get()
{
    $phobos put --family dir /etc/hosts oid1

    local uuid=$($phobos object list --output uuid oid1)

    $valg_phobos get oid1 $DIR_TEST_OUT/out || error "Get operation failed"
    rm $DIR_TEST_OUT/out

    $valg_phobos get --version 1 oid1 $DIR_TEST_OUT/out ||
        error "Get operation failed"
    rm $DIR_TEST_OUT/out

    $valg_phobos get --uuid $uuid oid1 $DIR_TEST_OUT/out ||
        error "Get operation failed"
    rm $DIR_TEST_OUT/out

    $valg_phobos get --version 1 --uuid $uuid oid1 $DIR_TEST_OUT/out \
        || error "Get operation failed"
    rm $DIR_TEST_OUT/out

    $phobos delete oid1

    $valg_phobos get oid1 $DIR_TEST_OUT/out \
        && error "Get operation should have failed" || true
    $valg_phobos get --version 1 oid1 $DIR_TEST_OUT/out ||
        error "Get operation failed"
    rm $DIR_TEST_OUT/out

    $valg_phobos get --uuid $uuid oid1 $DIR_TEST_OUT/out ||
        error "Get operation failed"
    rm $DIR_TEST_OUT/out
}

function test_creation_and_access_times()
{
    $phobos put --family dir /etc/hosts oid-time
    $phobos put --family dir --overwrite /etc/hosts oid-time
    $phobos put --family dir --overwrite /etc/hosts oid-time

    local uuid=$($phobos object list --output uuid oid-time)

    local ctm3=$($phobos object list --output creation_time oid-time)
    ctm3=$(date -d "$ctm3" +"%s")
    local ctm2=$($phobos object list --format csv --deprecated-only --output \
                 version,creation_time oid-time | grep "2," | cut -d',' -f2)
    ctm2=$(date -d "$ctm2" +"%s")
    local ctm1=$($phobos object list --format csv --deprecated-only --output \
                 version,creation_time oid-time | grep "1," | cut -d',' -f2)
    ctm1=$(date -d "$ctm1" +"%s")

    local atm3=$($phobos copy list oid-time --output access_time)
    atm3=$(date -d "$atm3" +"%s")
    local atm2=$($phobos copy list oid-time --deprecated-only --version 2 \
                 --output access_time)
    atm2=$(date -d "$atm2" +"%s")
    local atm1=$($phobos copy list oid-time --deprecated-only --version 1 \
                 --output access_time)
    atm1=$(date -d "$atm1" +"%s")

    [ $ctm1 -le $ctm2 ] \
        || error "Creation time of 1st version is greater than 2nd version one"
    [ $ctm2 -le $ctm3 ] \
        || error "Creation time of 2nd version is greater than 3rd version one"
    [ $atm1 -le $atm2 ] \
        || error "Access time of 1st version is greater than 2nd version one"
    [ $atm2 -le $atm3 ] \
        || error "Access time of 2nd version is greater than 3rd version one"

    sleep 1
    $phobos copy list oid-time -d -o all
    $valg_phobos get --uuid $uuid --version 1 oid-time $DIR_TEST_OUT/out
    rm $DIR_TEST_OUT/out
    $phobos copy list oid-time -d -o all

    local atm=$($phobos copy list oid-time --deprecated-only --version 1 \
                --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm1 -lt $atm ] \
        || error "Access time of 1st version was not updated"
    atm1=$atm

    atm=$($phobos copy list oid-time --deprecated-only --version 2 \
          --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm2 -eq $atm ] \
        || error "Access time of 2nd version was updated, only 1st should be"

    atm=$($phobos copy list oid-time --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm3 -eq $atm ] \
        || error "Access time of 3rd version was updated, only 1st should be"

    $valg_phobos get oid-time $DIR_TEST_OUT/out
    rm $DIR_TEST_OUT/out

    atm=$($phobos copy list oid-time --deprecated-only --version 1 \
          --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm1 -eq $atm ] \
        || error "Access time of 1st version was updated, only 3rd should be"

    atm=$($phobos copy list oid-time --deprecated-only --version 2 \
          --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm2 -eq $atm ] \
        || error "Access time of 2nd version was updated, only 3rd should be"

    atm=$($phobos copy list oid-time --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm3 -lt $atm ] \
        || error "Access time of 3rd version was not updated"
    atm3=$atm

    $valg_phobos get --uuid $uuid --version 2 oid-time $DIR_TEST_OUT/out
    rm $DIR_TEST_OUT/out

    atm=$($phobos copy list oid-time --deprecated-only --version 1 \
          --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm1 -eq $atm ] \
        || error "Access time of 1st version was updated, only 2nd should be"

    atm=$($phobos copy list oid-time --deprecated-only --version 2 \
          --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm2 -lt $atm ] \
        || error "Access time of 2nd version was not updated"
    atm2=$atm

    atm=$($phobos copy list oid-time --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm3 -eq $atm ] \
        || error "Access time of 3rd version was updated, only 2nd should be"

    sleep 1
    $phobos del oid-time
    atm=$($phobos copy list oid-time --deprecated-only --version 3 \
          --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm3 -eq $atm ] \
        || error "Access time should not be updated on delete operation"

    $phobos undel --uuid $uuid oid-time
    atm=$($phobos copy list oid-time --output access_time)
    atm=$(date -d "$atm" +"%s")
    [ $atm3 -eq $atm ] \
        || error "Access time should not be updated on undelete operation"
}

function test_errors()
{
    $valg_phobos get oid2 $DIR_TEST_OUT/out \
        && error "Get operation should fail on invalid oid" || true

    $valg_phobos get --uuid fake_uuid oid1 $DIR_TEST_OUT/out \
        && error "Get operation should fail on invalid uuid" || true

    $phobos put --family dir /etc/hosts oid1
    $valg_phobos get --version 5 oid1 $DIR_TEST_OUT/out \
        && error "Get operation should fail on invalid version" || true

    $phobos delete oid1
    $valg_phobos get --version 5 oid1 $DIR_TEST_OUT/out \
        && error "Get operation should fail on invalid version" || true

    $PSQL << EOF
UPDATE copy SET copy_status = 'incomplete' WHERE
    object_uuid = (SELECT object_uuid FROM object WHERE oid = 'oid1');
EOF
    $valg_phobos get oid1 $DIR_TEST_OUT/out &&
        error "Incomplete status of default copy should have failed the test" ||
            true
}

function test_get_copy_name()
{
    $phobos dir update --tags copy_dir1 ${DIRS[0]}
    $phobos dir update --tags copy_dir2 ${DIRS[1]}

    $phobos put -f dir --copy-name blob --tags copy_dir1 /etc/hosts oid-copy

    $valg_phobos get --copy-name source oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"

    $valg_phobos get --copy-name blob oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"

    rm $DIR_TEST_OUT/out

    $phobos copy create -f dir --copy-name blob --tags copy_dir2 oid-copy toto

    # Lock the media of the copy blob.
    $phobos dir lock ${DIRS[0]}
    $valg_phobos get --copy-name blob oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"
    $valg_phobos get --copy-name toto oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out

    # Lock the media of the copy toto.
    $phobos dir unlock ${DIRS[0]}
    $phobos dir lock ${DIRS[1]}
    $valg_phobos get --copy-name toto oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"
    $valg_phobos get --copy-name blob oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out

    # Copy preferred order at rank 1 among 1
    PHOBOS_COPY_get_preferred_order="toto" $valg_phobos get oid-copy \
        $DIR_TEST_OUT/out && error "Get operation should have failed"
    PHOBOS_COPY_get_preferred_order="blob" $valg_phobos get oid-copy \
        $DIR_TEST_OUT/out || error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out
    $phobos dir unlock ${DIRS[1]}
    $phobos dir lock ${DIRS[0]}
    PHOBOS_COPY_get_preferred_order="blob" $valg_phobos get oid-copy \
        $DIR_TEST_OUT/out && error "Get operation should have failed"
    PHOBOS_COPY_get_preferred_order="toto" $valg_phobos get oid-copy \
        $DIR_TEST_OUT/out || error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out

    # Copy preferred order at rank 1 among 2
    PHOBOS_COPY_get_preferred_order="blob,toto" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"
    PHOBOS_COPY_get_preferred_order="toto,blob" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out
    $phobos dir unlock ${DIRS[0]}
    $phobos dir lock ${DIRS[1]}
    PHOBOS_COPY_get_preferred_order="toto,blob" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"
    PHOBOS_COPY_get_preferred_order="blob,toto" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out

    # Copy preferred order at rank 2 among 2
    PHOBOS_COPY_get_preferred_order="toto,astral" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"
    PHOBOS_COPY_get_preferred_order="blob,astral" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out
    $phobos dir unlock ${DIRS[1]}
    $phobos dir lock ${DIRS[0]}
    PHOBOS_COPY_get_preferred_order="blob,astral" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out &&
        error "Get operation should have failed"
    PHOBOS_COPY_get_preferred_order="toto,astral" \
        $valg_phobos get oid-copy $DIR_TEST_OUT/out ||
        error "Get operation should have succeed"
    rm $DIR_TEST_OUT/out
}

function test_get_without_get_preferred_order()
{
    $phobos put -f dir /etc/hosts oid-without

    cp $test_dir/phobos.conf $DIR_TEST_OUT/phobos_bis.conf
    sed -i 's/get_preferred_order/#get_preferred_order/' \
        $DIR_TEST_OUT/phobos_bis.conf

    $valg_phobos -c $DIR_TEST_OUT/phobos_bis.conf get oid-without \
        $DIR_TEST_OUT/out || error "Get operation should have succeed"

    rm -f $DIR_TEST_OUT/out $DIR_TEST_OUT/phobos_bis.conf
}

TESTS=("setup; \
            test_get; \
            test_creation_and_access_times; \
            test_errors; \
            test_get_copy_name; \
            test_get_without_get_preferred_order; \
        cleanup")
