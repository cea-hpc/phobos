#!/bin/bash

#
#  All rights reserved (c) 2014-2025 CEA/DAM.
#
#  This file is part of Phobos.
#
#  Phobos is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 2.1 of the License, or
#  (at your option) any later version.
#
#  Phobos is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with Phobos. If not, see <http://www.gnu.org/licenses/>.
#

#
# Integration test for repack feature
#

test_dir=$(dirname $(readlink -e $0))
. $test_dir/test_env.sh
. $test_dir/setup_db.sh
. $test_dir/test_launch_daemon.sh
. $test_dir/tape_drive.sh

function setup
{
    setup_tables
    invoke_daemons
    invoke_tlc_bis
}

function cleanup
{
    waive_tlc_bis
    waive_daemons
    drain_all_drives
    drop_tables
    rm -f /tmp/oid-repack*
    rm -f /tmp/oid_bis-repack*
}

function obj_setup
{
    $phobos put -T origin /etc/hosts oid-repack-1
    $phobos put -T origin /etc/hosts oid-repack-2
    $phobos put -T origin /etc/hosts oid-repack-3
    $phobos put -T origin /etc/hosts oid-repack-4

    # Delete an object to let it be considered by the garbage collector
    $phobos del oid-repack-2
}

function obj_setup_bis
{
    $phobos put --library library_bis /etc/hosts oid_bis-repack-1
    $phobos put --library library_bis /etc/hosts oid_bis-repack-2

    # Delete an object to let it be considered by the garbage collector
    $phobos del oid_bis-repack-2
}

function obj_check
{
    $phobos get oid-repack-1 /tmp/oid-repack-1 ||
        error "get oid-repack-1 should have succeed"
    $phobos get oid-repack-3 /tmp/oid-repack-3 ||
        error "get oid-repack-3 should have succeed"
    $phobos get oid-repack-4 /tmp/oid-repack-4 ||
        error "get oid-repack-4 should have succeed"

    $phobos undel oid oid-repack-2 &&
        error "undel oid-repack-2 should have failed"

    diff /etc/hosts /tmp/oid-repack-1 ||
        error "file oid-repack-1 is not correctly retrieved"
    diff /etc/hosts /tmp/oid-repack-3 ||
        error "file oid-repack-3 is not correctly retrieved"
    diff /etc/hosts /tmp/oid-repack-4 ||
        error "file oid-repack-4 is not correctly retrieved"
}

function obj_check_bis
{
    $phobos get oid_bis-repack-1 /tmp/oid_bis-repack-1 ||
        error "get oid_bis-repack-1 should have succeed"

    $phobos undel oid oid_bis-repack-2 &&
        error "undel oid_bis-repack-2 should have failed"

    diff /etc/hosts /tmp/oid_bis-repack-1 ||
        error "file oid_bis-repack-1 is not correctly retrieved"
}

function tape_setup
{
    local bis=$1

    setup

    export drives="$(get_lto_drives 5 2)"
    export media="$(get_tapes L5 4 | nodeset -e)"
    export tape_bis="$(get_tapes_bis L6 1)"
    export drive_bis="$(get_lto_drives_bis 6 1)"

    export medium_origin="$(echo $media | cut -d' ' -f1)"
    export medium_alt="$(echo $media | cut -d' ' -f2)"
    export medium_other="$(echo $media | cut -d' ' -f3)"
    export medium_origin_bis="$(echo $media | cut -d' ' -f4)"

    $phobos drive add --unlock $drives
    $phobos tape add -t lto5 -T origin $medium_origin
    $phobos tape add -t lto5 -T origin $medium_origin_bis
    $phobos tape add -t lto5 -T alt $medium_alt
    $phobos tape add -t lto5 $medium_other

    $phobos tape format --unlock $media
    # Lock it to prevent write on it
    $phobos tape lock $medium_origin_bis

    if [[ ${bis} = "bis" ]]; then
        $phobos drive add --unlock --library library_bis $drive_bis
        $phobos tape add -t lto6 --library library_bis $tape_bis
        $phobos tape format --unlock --library library_bis $tape_bis

        obj_setup_bis
    else
        obj_setup
    fi

    $phobos tape unlock $medium_origin_bis
}

function tape_cleanup
{
    cleanup
    drain_all_drives
}

function test_simple_repack
{
    local family=$1

    $phobos tape lock $medium_origin_bis
    $valg_phobos tape repack $medium_origin &&
        error "Repack should have failed"

    $phobos tape unlock $medium_origin_bis

    # Make 'alt' medium not empty to prevent its selection for repack
    $phobos put -T alt /etc/hosts oid5

    $phobos $family repack $medium_origin

    nb=$($phobos extent list --name $medium_alt | wc -l)
    if [ $nb -ne 1 ]; then
        error "repack should not have selected a used medium"
    fi

    nb=$($phobos extent list --name $medium_origin_bis | wc -l)
    if [ $nb -ne 3 ]; then
        error "repack should have copied 3 extents to the empty medium"
    fi

    nb=$($phobos tape list -o stats.nb_obj $medium_origin_bis)
    if [ $nb -ne 3 ]; then
        error "tape stats should have said 3 extents were copied"
    fi

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi

    obj_check

    state=$($phobos $family list -o fs.status $medium_origin)
    if [ "$state" != "empty" ]; then
        error "repack should format source medium"
    fi
}

function test_deprec_repack
{
    local family=$1

    # Put a deprecated object on 'alt' medium and check it is still available
    # after repack of the 'original' medium
    $phobos put -T alt /etc/hosts oid5
    $phobos del oid5

    $phobos $family repack $medium_origin

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 1 ]; then
        error "repack should not have deleted deprecated object on 'alt' medium"
    fi
}

function test_raid1_repack_setup
{
    setup

    export drives="$(get_lto_drives 5 2)"
    export media="$(get_tapes L5 3 | nodeset -e)"

    export medium_origin1="$(echo $media | cut -d' ' -f1)"
    export medium_origin2="$(echo $media | cut -d' ' -f2)"
    export medium_other="$(echo $media | cut -d' ' -f3)"

    $phobos drive add --unlock $drives
    $phobos tape add -t lto5 -T origin $medium_origin1 $medium_origin2
    $phobos tape add -t lto5 $medium_other

    $phobos tape format --unlock $media

    $phobos put -T origin -P repl_count=2 /etc/hosts oid-mirror

    $phobos del oid-mirror
}

function test_raid1_repack
{
    local family=$1

    $phobos $family repack $medium_origin1

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi

    $phobos get oid-mirror /tmp/oid-repack-bad &&
        error "oid-mirror should not be available"

    return 0
}

function test_orphan_repack
{
    local family=$1

    uuid=$($phobos object list -o uuid oid-repack-1)
    $PSQL -qc "DELETE FROM object WHERE object_uuid='${uuid}';"
    ext_uuid=$($PSQL -qtc \
        "DELETE FROM layout WHERE object_uuid='${uuid}' RETURNING extent_uuid;")

    $phobos $family repack $medium_origin

    nb=$($PSQL -qtc "SELECT COUNT(*) FROM extent")
    if [ $nb -ne 2 ]; then
        error "repack should have removed the 'orphan' extent"
    fi

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi
}

function test_dedup_repack_setup
{
    setup

    export drives="$(get_lto_drives 5 2)"
    export media="$(get_tapes L5 2 | nodeset -e)"

    export medium_origin="$(echo $media | cut -d' ' -f1)"
    export medium_other="$(echo $media | cut -d' ' -f2)"

    $phobos drive add --unlock $drives
    $phobos tape add -t lto5 -T origin $medium_origin

    $phobos tape format --unlock $medium_origin

    $phobos put -T origin /etc/hosts oid-1
    $phobos put -T origin /etc/hosts oid-2

    $phobos tape add -t lto5 -T origin $medium_other
    $phobos tape format --unlock $medium_other

    object_uuid1=$($phobos object list -o uuid oid-1)
    extent_uuid1=$($phobos extent list --degroup -o ext_uuid oid-1)
    extent_uuid1=${extent_uuid1//[\[\]\']}
    extent_uuid2=$($phobos extent list --degroup -o ext_uuid oid-2)
    extent_uuid2=${extent_uuid2//[\[\]\']}

    size=$(stat --printf="%s" /etc/hosts)
    $PSQL << EOF
INSERT INTO object(oid, user_md)
  VALUES ('oid-3', '{}');

INSERT INTO copy(object_uuid, version, copy_name, lyt_info, copy_status) VALUES
    ((SELECT object_uuid FROM object WHERE oid='oid-3'), 1, 'source',
     '{"name":"raid1","major":0,"minor":2,
       "attrs":{"raid1.repl_count":"1","raid1.object_size":"$size"}}',
       'complete');

INSERT INTO layout(object_uuid, version, extent_uuid, layout_index, copy_name)
  VALUES ('${object_uuid1}', '1', '${extent_uuid1}', '1', 'source'),
         ((SELECT object_uuid FROM object WHERE oid='oid-3'), '1',
          '${extent_uuid2}', '0', 'source');
EOF

    $phobos del oid-1
    $phobos del oid-2
}

function test_dedup_repack
{
    local family=$1

    $phobos $family repack $medium_origin
    nb=$($phobos extent list --name $medium_other | wc -l)
    if [ $nb -ne 1 ]; then
        error "repack should have copied 1 extent to the tagged medium"
    fi

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi

    $phobos get oid-3 /tmp/oid-repack-dedup ||
        error "get oid-3 should have succeed"

    diff /etc/hosts /tmp/oid-repack-dedup ||
        error "file oid-repack-dedup is not correctly retrieved"
}

function test_tags_repack
{
    $phobos tape lock $medium_alt
    $valg_phobos tape repack -T alt $medium_origin &&
        error "Repack should have failed"

    $phobos tape unlock $medium_alt
    $valg_phobos tape repack -T alt $medium_origin ||
        error "Repack should have succeed"

    nb=$($phobos extent list --name $medium_alt | wc -l)
    if [ $nb -ne 3 ]; then
        error "repack should have copied 3 extents to the tagged medium"
    fi

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi

    obj_check

    state=$($phobos tape list -o fs.status $medium_origin)
    if [ "$state" != "empty" ]; then
        error "repack should format source medium"
    fi
}

function test_tags_empty_repack
{
    $phobos tape lock $medium_other
    $phobos tape lock $medium_origin_bis
    $phobos tape lock $medium_alt
    $valg_phobos tape repack -T "" $medium_origin &&
        error "Repack should have failed"

    $phobos tape unlock $medium_other
    $phobos tape unlock $medium_origin_bis
    $phobos tape unlock $medium_alt
    $valg_phobos tape repack -T "" $medium_origin ||
        error "Repack should have succeed"

    nb=$(($phobos extent list --name $medium_alt;
          $phobos extent list --name $medium_other;
          $phobos extent list --name $medium_origin_bis) | wc -l)
    if [ $nb -ne 3 ]; then
        error "repack should have copied 3 extents to one available medium"
    fi

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi

    obj_check

    state=$($phobos tape list -o fs.status $medium_origin)
    if [ "$state" != "empty" ]; then
        error "repack should format source medium"
    fi
}

function test_simple_repack_library_bis
{
    # Make 'origin' and 'alt' medium not empty to prevent selection for repack
    $phobos tape lock $medium_origin_bis
    $phobos put -T origin /etc/hosts oid5
    $phobos put -T alt /etc/hosts oid6

    $valg_phobos tape repack --library library_bis $tape_bis

    nb=$($phobos extent list --name $medium_alt | wc -l)
    if [ $nb -ne 1 ]; then
        error "repack should not have selected a used medium"
    fi

    nb=$($phobos extent list --name $medium_other | wc -l)
    if [ $nb -ne 1 ]; then
        error "repack should have copied 1 extent to the empty medium"
    fi

    nb=$($phobos tape list -o stats.nb_obj $medium_other)
    if [ $nb -ne 1 ]; then
        error "tape stats should have said 1 extent were copied"
    fi

    nb=$($phobos object list --deprecated-only | wc -l)
    if [ $nb -ne 0 ]; then
        error "repack should have deleted deprecated objects"
    fi

    obj_check_bis

    state=$($phobos tape list --library library_bis -o fs.status $tape_bis)
    if [ "$state" != "empty" ]; then
        error "repack should format source medium in library bis"
    fi
}

if [[ ! -w /dev/changer ]]; then
    skip "Library required for this test"
fi

TEST_CLEANUP=cleanup
TESTS=("tape_setup;test_simple_repack tape;tape_cleanup"
       "tape_setup;test_deprec_repack tape;tape_cleanup"
       "test_raid1_repack_setup;test_raid1_repack tape;tape_cleanup"
       "tape_setup;test_orphan_repack tape;tape_cleanup"
       "test_dedup_repack_setup;test_dedup_repack tape;tape_cleanup"
       "tape_setup;test_tags_repack;tape_cleanup"
       "tape_setup;test_tags_empty_repack;tape_cleanup"
       "tape_setup bis;test_simple_repack_library_bis;tape_cleanup")
